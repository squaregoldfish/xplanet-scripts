#!/usr/bin/python3
import sys
import urllib.request
import json
from matplotlib.colors import LinearSegmentedColormap

# Get latest earthquake data from USGS and generate an Xplnet marker file
#
# Usage: earthquakes.py output_file min_strength
#
# output_file  is the name of the marker file to generate
# min_strength will filter the earthquakes so that quakes with a magnitude
#              less than this value will not be included

# The URL for the USGS JSON - pick which one you want

# All quakes for the past hour
#URL = "https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_hour.geojson"

# All quakes for the last day
URL = "https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_day.geojson"

# All quakes for the last 7 days
#URL = "https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_week.geojson"

# All quakes for the last 30 days
#URL = "https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_month.geojson"

##################################

# The CDI color scale
cdict = {
  'red':   [(0.000, 1.000, 1.000),
            (0.050, 0.976, 0.976),
            (0.059, 0.949, 0.949),
            (0.067, 0.918, 0.918),
            (0.078, 0.910, 0.910),
            (0.087, 0.882, 0.882),
            (0.097, 0.843, 0.843),
            (0.106, 0.784, 0.784),
            (0.125, 0.749, 0.749),
            (0.143, 0.737, 0.737),
            (0.162, 0.710, 0.710),
            (0.181, 0.698, 0.698),
            (0.200, 0.663, 0.663),
            (0.256, 0.627, 0.627),
            (0.275, 0.624, 0.624),
            (0.302, 0.616, 0.616),
            (0.311, 0.612, 0.612),
            (0.320, 0.604, 0.604),
            (0.328, 0.600, 0.600),
            (0.345, 0.592, 0.592),
            (0.354, 0.588, 0.588),
            (0.362, 0.588, 0.588),
            (0.371, 0.588, 0.588),
            (0.380, 0.584, 0.584),
            (0.388, 0.584, 0.584),
            (0.397, 0.584, 0.584),
            (0.402, 0.584, 0.584),
            (0.410, 0.584, 0.584),
            (0.418, 0.584, 0.584),
            (0.434, 0.576, 0.576),
            (0.442, 0.596, 0.596),
            (0.450, 0.612, 0.612),
            (0.458, 0.647, 0.647),
            (0.466, 0.663, 0.663),
            (0.473, 0.686, 0.686),
            (0.489, 0.725, 0.725),
            (0.497, 0.769, 0.769),
            (0.511, 0.847, 0.847),
            (0.520, 0.898, 0.898),
            (0.529, 0.914, 0.914),
            (0.537, 0.953, 0.953),
            (0.580, 0.976, 0.976),
            (0.588, 0.976, 0.976),
            (0.597, 0.980, 0.980),
            (0.602, 0.984, 0.984),
            (0.608, 0.988, 0.988),
            (0.621, 0.988, 0.988),
            (0.634, 0.992, 0.992),
            (0.659, 0.996, 0.996),
            (0.672, 0.996, 0.996),
            (0.678, 0.992, 0.992),
            (0.685, 0.988, 0.988),
            (0.691, 0.984, 0.984),
            (0.698, 0.984, 0.984),
            (0.702, 0.980, 0.980),
            (0.708, 0.976, 0.976),
            (0.715, 0.976, 0.976),
            (0.721, 0.973, 0.973),
            (0.727, 0.969, 0.969),
            (0.734, 0.969, 0.969),
            (0.747, 0.965, 0.965),
            (0.753, 0.961, 0.961),
            (0.759, 0.953, 0.953),
            (0.766, 0.949, 0.949),
            (0.772, 0.945, 0.945),
            (0.779, 0.945, 0.945),
            (0.785, 0.949, 0.949),
            (0.791, 0.941, 0.941),
            (0.798, 0.937, 0.937),
            (0.810, 0.933, 0.933),
            (0.874, 0.918, 0.918),
            (0.902, 0.859, 0.859),
            (0.909, 0.839, 0.839),
            (0.916, 0.827, 0.827),
            (0.923, 0.816, 0.816),
            (0.930, 0.796, 0.796),
            (0.936, 0.776, 0.776),
            (1.000, 0.776, 0.776)],
  'green': [(0.000, 1.000, 1.000),
            (0.050, 0.984, 0.984),
            (0.059, 0.961, 0.961),
            (0.067, 0.937, 0.937),
            (0.078, 0.925, 0.925),
            (0.087, 0.898, 0.898),
            (0.097, 0.871, 0.871),
            (0.106, 0.808, 0.808),
            (0.125, 0.800, 0.800),
            (0.143, 0.812, 0.812),
            (0.162, 0.835, 0.835),
            (0.181, 0.863, 0.863),
            (0.200, 0.878, 0.878),
            (0.256, 0.863, 0.863),
            (0.275, 0.859, 0.859),
            (0.302, 0.855, 0.855),
            (0.311, 0.851, 0.851),
            (0.320, 0.851, 0.851),
            (0.328, 0.847, 0.847),
            (0.345, 0.843, 0.843),
            (0.354, 0.835, 0.835),
            (0.362, 0.831, 0.831),
            (0.371, 0.831, 0.831),
            (0.380, 0.824, 0.824),
            (0.388, 0.820, 0.820),
            (0.397, 0.816, 0.816),
            (0.402, 0.808, 0.808),
            (0.410, 0.808, 0.808),
            (0.418, 0.804, 0.804),
            (0.434, 0.796, 0.796),
            (0.442, 0.800, 0.800),
            (0.450, 0.804, 0.804),
            (0.458, 0.812, 0.812),
            (0.466, 0.816, 0.816),
            (0.473, 0.820, 0.820),
            (0.489, 0.816, 0.816),
            (0.497, 0.827, 0.827),
            (0.511, 0.871, 0.871),
            (0.520, 0.890, 0.890),
            (0.529, 0.898, 0.898),
            (0.537, 0.918, 0.918),
            (0.580, 0.906, 0.906),
            (0.588, 0.898, 0.898),
            (0.597, 0.882, 0.882),
            (0.602, 0.871, 0.871),
            (0.608, 0.851, 0.851),
            (0.621, 0.824, 0.824),
            (0.634, 0.796, 0.796),
            (0.659, 0.737, 0.737),
            (0.672, 0.706, 0.706),
            (0.678, 0.698, 0.698),
            (0.685, 0.678, 0.678),
            (0.691, 0.667, 0.667),
            (0.698, 0.659, 0.659),
            (0.702, 0.635, 0.635),
            (0.708, 0.631, 0.631),
            (0.715, 0.620, 0.620),
            (0.721, 0.604, 0.604),
            (0.727, 0.584, 0.584),
            (0.734, 0.561, 0.561),
            (0.747, 0.525, 0.525),
            (0.753, 0.486, 0.486),
            (0.759, 0.435, 0.435),
            (0.766, 0.400, 0.400),
            (0.772, 0.373, 0.373),
            (0.779, 0.341, 0.341),
            (0.785, 0.306, 0.306),
            (0.791, 0.239, 0.239),
            (0.798, 0.200, 0.200),
            (0.810, 0.125, 0.125),
            (0.874, 0.110, 0.110),
            (0.902, 0.122, 0.122),
            (0.909, 0.118, 0.118),
            (0.916, 0.125, 0.125),
            (0.923, 0.122, 0.122),
            (0.930, 0.122, 0.122),
            (0.936, 0.122, 0.122),
            (1.000, 0.122, 0.122)],
  'blue':  [(0.000, 1.000, 1.000),
            (0.050, 0.996, 0.996),
            (0.059, 0.984, 0.984),
            (0.067, 0.976, 0.976),
            (0.078, 0.969, 0.969),
            (0.087, 0.957, 0.957),
            (0.097, 0.937, 0.937),
            (0.106, 0.906, 0.906),
            (0.125, 0.906, 0.906),
            (0.143, 0.918, 0.918),
            (0.162, 0.933, 0.933),
            (0.181, 0.957, 0.957),
            (0.200, 0.973, 0.973),
            (0.256, 0.941, 0.941),
            (0.275, 0.929, 0.929),
            (0.302, 0.918, 0.918),
            (0.311, 0.914, 0.914),
            (0.320, 0.902, 0.902),
            (0.328, 0.902, 0.902),
            (0.345, 0.867, 0.867),
            (0.354, 0.839, 0.839),
            (0.362, 0.796, 0.796),
            (0.371, 0.773, 0.773),
            (0.380, 0.733, 0.733),
            (0.388, 0.714, 0.714),
            (0.397, 0.686, 0.686),
            (0.402, 0.647, 0.647),
            (0.410, 0.624, 0.624),
            (0.418, 0.580, 0.580),
            (0.434, 0.529, 0.529),
            (0.442, 0.478, 0.478),
            (0.450, 0.459, 0.459),
            (0.458, 0.408, 0.408),
            (0.466, 0.376, 0.376),
            (0.473, 0.333, 0.333),
            (0.489, 0.247, 0.247),
            (0.497, 0.239, 0.239),
            (0.511, 0.227, 0.227),
            (0.520, 0.216, 0.216),
            (0.529, 0.212, 0.212),
            (0.537, 0.212, 0.212),
            (0.580, 0.208, 0.208),
            (0.588, 0.204, 0.204),
            (0.597, 0.200, 0.200),
            (0.602, 0.027, 0.027),
            (0.608, 0.024, 0.024),
            (0.621, 0.024, 0.024),
            (0.634, 0.039, 0.039),
            (0.659, 0.071, 0.071),
            (0.672, 0.082, 0.082),
            (0.678, 0.082, 0.082),
            (0.685, 0.090, 0.090),
            (0.691, 0.102, 0.102),
            (0.698, 0.106, 0.106),
            (0.702, 0.110, 0.110),
            (0.708, 0.106, 0.106),
            (0.715, 0.114, 0.114),
            (0.721, 0.118, 0.118),
            (0.727, 0.122, 0.122),
            (0.734, 0.118, 0.118),
            (0.747, 0.125, 0.125),
            (0.753, 0.125, 0.125),
            (0.759, 0.133, 0.133),
            (0.766, 0.137, 0.137),
            (0.772, 0.133, 0.133),
            (0.779, 0.137, 0.137),
            (0.785, 0.137, 0.137),
            (0.791, 0.137, 0.137),
            (0.798, 0.133, 0.133),
            (0.810, 0.145, 0.145),
            (0.874, 0.141, 0.141),
            (0.902, 0.149, 0.149),
            (0.909, 0.149, 0.149),
            (0.916, 0.149, 0.149),
            (0.923, 0.149, 0.149),
            (0.930, 0.145, 0.145),
            (0.936, 0.145, 0.145),
            (1.000, 0.145, 0.145)]
}

# The main function
def main(output_file, min_strength):

  # Make the color map
  cdi_map = LinearSegmentedColormap('CDI', cdict)

  # Download the JSON from USGS
  with urllib.request.urlopen(URL) as url:
    data_string = url.read().decode()

  # For debugging - download the USGS json into a file
  #with open("quake.json", "r") as f:
  #  data_string = f.read()

  # Parse the JSON
  data = json.loads(data_string)

  # Open the output file
  with open(output_file, 'w') as f:

    # Loop through each quake
    for quake in data["features"]:

      # Check the magnitude
      mag = quake["properties"]["mag"]
      if mag is not None and mag >= min_strength:

        # Extract details and write line to the output file
        lon = quake["geometry"]["coordinates"][0]
        lat = quake["geometry"]["coordinates"][1]
        cdi = quake["properties"]["cdi"]
        if (cdi is None):
          cdi = 0

        cdi_color = cdi_map(cdi / 10)
        red = int(round(cdi_color[0] * 255))
        green = int(round(cdi_color[1] * 255))
        blue = int(round(cdi_color[2] * 255))

        cdi_hex = '#{:02x}{:02x}{:02x}'.format(red, green, blue)

        f.write('{:1.3f} {:1.3f} "{:3.1f}" color={} align=Above\n'.format(lat, lon, mag, cdi_hex))


if __name__ == '__main__':
    if len(sys.argv) == 3:
        main(sys.argv[1], float(sys.argv[2]))
    else:
        exit('USAGE: earthquakes.py output_file min_strength')
